mamanelad, ronkatz2
Student Elad mamaman (314877853), Ron Katz (207049164)
EX: 2

FILES:
uthreads.cpp


REMARKS:


ANSWERS:

Q1:
One of the general use of the user-level threads can be some UX\UI operation
like computer game using mutiple things at the same time(like keyboard, mouse
and making some matrix multiplications). User-level threads are reasonable choice
for this because no kernel interaction required, so the contet switch is "cheaper"
then kernel level threads. Also They can be implemented on any OS that does not 
support threads, so the process can run on any computer.

Q2:
Advantages of creating a new process for each tab:
1 - if one of the tabs crashes, the entire browser remains stabl(like plugin fail).
2 - if there a security breach on one of the tabs(like javascript attack) there no
    way to get to the other tabs.
3 - each tab has its own space of memory so it has more resources.

Disadvantages of creating a new process for each tab:
1 - it takes more time to create new process for each tab so it requires more 
	resources than kernel threads.
2 - the tabs can share memory between each other using the basic memory.
3 - the process context switch has larger overthead than thread context switch.

Q3:
First when we open the shell a new process initiated and we have a system call.
When we are typing on the keyboard, interrupt sent to the operation system.
When we will finish and send a request it will init onther system call for the OS
The kill command invokes the kill() system call, which sends
signal to the process with forces termination of the application (refernces ID).

Q4:
-Real time is counted in every process countinously
 example: OS clock application timer that keeps counting the time no-matter with process
 is active.
-Virual time is counted onlu in the duration of the active process running time.
 example: runtime of a few singal process in order to compare the process running time
 of each.

Q5:
sigsetjmp() saves the current thread stat in its env argument for later use by siglongjmp()
siglongjmp() function restores the env saved by the most recent invocation of sigsetjmp() 
in the same thread, with the corresponding sigjmp_buf argument.





